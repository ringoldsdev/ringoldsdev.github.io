---
import BlogLayout from "@/layouts/BlogLayout.astro";
import Tags from "@/components/Tags.astro";
import Tag from "@/components/Tag.astro";
import { getCollection, getEntry } from "astro:content";
import TagLinkSmall from "@/components/TagLinkSmall.astro";
import { render } from "astro:content";

// Fetch about me content
const about = await getEntry("me", "about");
const skills = about?.data?.skills ?? [];

if (!about) {
	throw new Error("About me content not found");
}

const { Content: AboutMeContent } = await render(about);

// Fetch and sort blog posts by date (descending)
const posts = (await getCollection("blog")).sort((a, b) => {
	const dateA = a.data.pubDate
		? new Date(
				a.data.pubDate instanceof Date
					? a.data.pubDate
					: String(a.data.pubDate),
			)
		: new Date(0);
	const dateB = b.data.pubDate
		? new Date(
				b.data.pubDate instanceof Date
					? b.data.pubDate
					: String(b.data.pubDate),
			)
		: new Date(0);
	return dateB.getTime() - dateA.getTime();
});
---

<BlogLayout title="Ringolds Leščinskis" backgroundText={skills}>
	<div slot="hero" class="pb-8 md:text-center text-white">
		<div class="max-w-screen-md mx-auto mt-10 sm:mt-0 md:px-20">
			<div
				class="prose prose-invert prose-p:text-xl prose-p:md:text-2xl prose-p:mb-4 prose-p:font-light prose-p:text-gray-200 [&_b]:font-semibold [&_b]:text-white"
			>
				<AboutMeContent />
			</div>

			<Tags class="-ml-4 sm:ml-0 mt-8">
				{
					skills.map((skill) => (
						<Tag
							href={`/tags/${skill.toLowerCase().replace(/\s+/g, "-")}`}
							text={skill}
						/>
					))
				}
			</Tags>
		</div>
	</div>

	<div>
		<h3 class="text-md font-regular mb-6 text-gray-500">Latest Blog Posts</h3>
		<ul class="space-y-8">
			{
				posts.map((post) => (
					<li>
						<a href={`/blog/${post.id}`} class="block group">
							<h4 class="text-2xl font-bold text-gray-900 dark:text-gray-100 group-hover:text-accent-400 font-display mb-1">
								{post.data.title}
							</h4>
							<p class="text-gray-500 dark:text-gray-300 text-sm mb-1">
								{post.data.pubDate &&
									new Date(post.data.pubDate).toLocaleDateString("en-US", {
										year: "numeric",
										month: "long",
										day: "numeric",
									})}
							</p>
							<p class="text-gray-700 dark:text-gray-300 text-base mb-2">
								{post.data.description}
							</p>
							<Tags class="mt-4 sm:justify-start">
								{Array.isArray(post.data.tags) &&
									post.data.tags.map((tag) => (
										<TagLinkSmall
											href={`/tags/${tag.toLowerCase()}`}
											text={tag}
											class="bg-gray-100 text-gray-500 hover:bg-gray-200 hover:text-black dark:bg-[rgb(35,35,35)] dark:text-gray-300 dark:hover:bg-[rgb(50,50,50)] dark:hover:text-gray-300 rounded-full px-3 py-1 text-xs font-medium mr-2 mb-2 transition-colors duration-200"
										/>
									))}
							</Tags>
						</a>
					</li>
				))
			}
		</ul>
	</div>
</BlogLayout>
